import { Prayer, StreakData } from '../types';
import {
    getAllPrayers,
    getStreakData,
    initializeDatabase,
    insertInitialPrayers,
    isPrayerCompleted,
    markPrayerAsCompleted
} from './database';
import { generateDailySeed } from './date';
  
  /**
   * Classe principal para gerenciar todas as opera√ß√µes do banco de dados
   */
  class DatabaseManager {
    private isInitialized = false;
  
    /**
     * Inicializa o banco de dados e insere dados iniciais se necess√°rio
     */
    async initialize(): Promise<void> {
      try {
        console.log('üîÑ Inicializando banco de dados...');
        
        await initializeDatabase();
        await insertInitialPrayers();
        
        this.isInitialized = true;
        console.log('‚úÖ DatabaseManager inicializado com sucesso');
        
      } catch (error) {
        console.error('‚ùå Erro ao inicializar DatabaseManager:', error);
        throw error;
      }
    }
  
    /**
     * Verifica se o banco foi inicializado
     */
    private ensureInitialized(): void {
      if (!this.isInitialized) {
        throw new Error('DatabaseManager n√£o foi inicializado. Chame initialize() primeiro.');
      }
    }
  
    /**
     * Obt√©m a ora√ß√£o do dia baseada na data atual
     */
    async getTodaysPrayer(): Promise<Prayer | null> {
      this.ensureInitialized();
      
      try {
        const today = new Date();
        const seed = generateDailySeed(today);
        const prayers = await getAllPrayers();
        
        if (prayers.length === 0) {
          console.log('‚ùå Nenhuma ora√ß√£o encontrada no banco');
          return null;
        }
        
        // Usar o seed para selecionar uma ora√ß√£o consistente
        const prayerIndex = seed % prayers.length;
        const prayer = prayers[prayerIndex];
        
        console.log(`üìñ Ora√ß√£o do dia obtida (seed: ${seed}, index: ${prayerIndex})`);
        return prayer;
        
      } catch (error) {
        console.error('‚ùå Erro ao obter ora√ß√£o do dia:', error);
        return null;
      }
    }
  
    /**
     * Marca o dia atual como completo (usu√°rio orou)
     */
    async completeTodaysPrayer(prayerId: number): Promise<boolean> {
      this.ensureInitialized();
      
      try {
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
        
        // Primeiro verifica se j√° completou hoje
        const alreadyCompleted = await isPrayerCompleted(today);
        
        if (alreadyCompleted) {
          console.log('‚ÑπÔ∏è Usu√°rio j√° orou hoje');
          return true;
        }
  
        await markPrayerAsCompleted(today, prayerId);
        console.log('‚úÖ Ora√ß√£o de hoje marcada como completa');
        return true;
        
      } catch (error) {
        console.error('‚ùå Erro ao marcar ora√ß√£o como completa:', error);
        return false;
      }
    }
  
    /**
     * Verifica se o usu√°rio j√° orou hoje
     */
    async hasUserPrayedToday(): Promise<boolean> {
      this.ensureInitialized();
      
      try {
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
        const completed = await isPrayerCompleted(today);
        console.log(`üìä Usu√°rio ${completed ? 'j√° orou' : 'ainda n√£o orou'} hoje`);
        return completed;
        
      } catch (error) {
        console.error('‚ùå Erro ao verificar se usu√°rio orou hoje:', error);
        return false;
      }
    }
  
    /**
     * Obt√©m dados do streak do usu√°rio
     */
    async getUserStreakData(): Promise<StreakData | null> {
      this.ensureInitialized();
      
      try {
        const streakData = await getStreakData();
        console.log(`üìà Streak atual: ${streakData.currentStreak} dias`);
        return streakData;
        
      } catch (error) {
        console.error('‚ùå Erro ao obter dados de streak:', error);
        return null;
      }
    }
  
    /**
     * Obt√©m estat√≠sticas resumidas do usu√°rio
     */
    async getUserSummary(): Promise<{
      todaysPrayer: Prayer | null;
      hasCompletedToday: boolean;
      streakData: StreakData | null;
    }> {
      this.ensureInitialized();
      
      try {
        const [todaysPrayer, hasCompletedToday, streakData] = await Promise.all([
          this.getTodaysPrayer(),
          this.hasUserPrayedToday(),
          this.getUserStreakData(),
        ]);
  
        return {
          todaysPrayer,
          hasCompletedToday,
          streakData,
        };
        
      } catch (error) {
        console.error('‚ùå Erro ao obter resumo do usu√°rio:', error);
        return {
          todaysPrayer: null,
          hasCompletedToday: false,
          streakData: null,
        };
      }
    }
  }
  
  // Exportar uma inst√¢ncia √∫nica (singleton)
  export const databaseManager = new DatabaseManager();
  
  // Exportar a classe para testes se necess√°rio
  export default DatabaseManager;
  